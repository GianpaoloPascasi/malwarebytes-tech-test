type HttpMethod = "GET" | "POST" | "PUT" | "PATCH" | "DELETE";

const apiConfig = {
  baseUrl: process.env.REACT_APP_API_BASE_URL,
};

export class ApiError extends Error {
  httpCode: number;
  constructor(message: string, httpCode: number) {
    super();
    this.httpCode = httpCode;
    this.message = message;
  }
}

export async function apiAuthCall(
  url: string,
  jwt: string,
  method: HttpMethod,
  headers?: Headers,
  body?: any
) {
  if (!headers) {
    headers = new Headers();
  }
  headers.append("Content-Type", "application/json");
  headers.append("Authorization", `Bearer ${jwt}`);
  const response: Response = await fetch(url, {
    method,
    headers,
    body: body && JSON.stringify(body),
  }).catch((reason) => reason);
  if (!response.ok) {
    throw new ApiError(response.statusText, response.status);
  }
  const { data } = await response.json();
  return data;
}

export async function apiCall(
  url: string,
  method: HttpMethod,
  headers?: Headers,
  body?: any
) {
  if (!headers) {
    headers = new Headers();
  }
  headers.append("Content-Type", "application/json");
  const response = await fetch(url, {
    method,
    headers,
    body: body && JSON.stringify(body),
  }).catch((reason) => reason);
  if (!response.ok) {
    throw new ApiError(response.statusText, response.status);
  }
  const { data } = await response.json();
  return data;
}

export default apiConfig;
