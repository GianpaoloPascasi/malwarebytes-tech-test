import DialogTitle from "@mui/material/DialogTitle";
import Dialog from "@mui/material/Dialog";
import Typography from "@mui/material/Typography";
import { useDispatch, useSelector } from "react-redux";
import { selectItemById } from "../../store/items/items.selectors";
import { selectUiData } from "../../store/ui/ui.selectors";
import { Item } from "../../store/items/items.slice";
import { Grid } from "@mui/material";
import { Button } from "@mui/material";
import { uiSliceActions } from "../../store/ui/ui.slice";
import {
  addItemToOrder,
  removeItemFromOrder,
} from "../../store/items/items.actions";
import {
  selectOrder,
  selectTotalItemInCart,
} from "../../store/user/user.selectors";

export const ADD_ITEM_ORDER_MODAL = "addItemModal";

export interface AddItemToOrderDialogProps {
  open: boolean;
  item: Item;
  onClose: () => void;
  addToCart: () => void;
  removeFromCart: () => void;
  totalInCart: number;
}

export function AddItemToOrderDialog(props: AddItemToOrderDialogProps) {
  const { onClose, addToCart, removeFromCart, item, open, totalInCart } = props;

  return (
    <Dialog onClose={onClose} open={open} maxWidth="lg" fullWidth={true}>
      <DialogTitle>
        {item.id} {item.name}
      </DialogTitle>
      <Grid container spacing={2} padding={2}>
        <Grid item xs={8}>
          <Typography>{item.description}</Typography>
        </Grid>
        <Grid item xs={4} display="flex" justifyContent="flex-end">
          <Typography>Left: {item.quantity}</Typography>
        </Grid>
        <Grid item xs={12} display="flex" justifyContent="flex-end">
          <Button
            variant="contained"
            disabled={item.quantity <= 0}
            onClick={addToCart}
          >
            Add to cart
          </Button>
        </Grid>
        <Grid item xs={12} display="flex" justifyContent="flex-end">
          <Button
            variant="contained"
            disabled={totalInCart <= 0}
            color="error"
            onClick={removeFromCart}
          >
            Remove from cart
          </Button>
        </Grid>
        <Grid item xs={12} display="flex" justifyContent="flex-end">
          <Typography>This items in cart: {totalInCart ?? 0}</Typography>
        </Grid>
        <Grid item xs={12} display="flex" justifyContent="flex-end">
          <Button variant="contained" onClick={onClose}>
            Close
          </Button>
        </Grid>
      </Grid>
    </Dialog>
  );
}

export default function AddItemToOrderDialogContainer() {
  const dialogData = useSelector(selectUiData(ADD_ITEM_ORDER_MODAL));
  const item = useSelector(selectItemById(Number(dialogData?.id)));
  const order = useSelector(selectOrder);
  const totalInCart = useSelector(selectTotalItemInCart(order?.id, item?.id));
  const dispatch = useDispatch();

  const onClose = () => {
    dispatch(
      uiSliceActions.setUiData({
        uiElementName: ADD_ITEM_ORDER_MODAL,
        data: { show: false },
      })
    );
  };

  const addToCart = () => {
    if (item) {
      dispatch(addItemToOrder(item.id));
    }
  };

  const removeFromCart = () => {
    if (item && order) {
      dispatch(removeItemFromOrder(order.id, item.id));
    }
  };

  return dialogData?.show && item ? (
    <AddItemToOrderDialog
      item={item}
      open={dialogData.show}
      onClose={onClose}
      addToCart={addToCart}
      removeFromCart={removeFromCart}
      totalInCart={totalInCart || 0}
    />
  ) : null;
}
