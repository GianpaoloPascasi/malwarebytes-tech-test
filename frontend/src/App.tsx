import "./App.css";
import { Provider, useDispatch, useSelector } from "react-redux";
import { store } from "./store/store";
import { RouterProvider, createBrowserRouter } from "react-router-dom";
import Login from "./components/user/Login";
import Signup from "./components/user/Signup";
import ItemList from "./components/items/ItemList";
import { useEffect, useState } from "react";
import { USER_ACTIONS } from "./store/user/user.actions";
import {
  selectIsLoggedIn,
  selectTotalItemsInCart,
} from "./store/user/user.selectors";
import { Alert, Button, Grid, Snackbar, Typography } from "@mui/material";
import { userSliceActions } from "./store/user/user.slice";
import { selectUiData } from "./store/ui/ui.selectors";
import { uiSliceActions } from "./store/ui/ui.slice";

const router = createBrowserRouter([
  {
    path: "login",
    element: <Login />,
  },
  {
    path: "",
    element: <Login />,
  },
  {
    path: "signup",
    element: <Signup />,
  },
  {
    path: "items",
    element: <ItemList />,
  },
]);

export const ERROR_SNACKBAR = "ERROR_SNACKBAR";

function AppWithProvider() {
  const dispatch = useDispatch();
  const isLoggedIn = useSelector(selectIsLoggedIn);
  const totalItemsInCart = useSelector(selectTotalItemsInCart);
  const [isLoaded, setIsLoaded] = useState(false);
  const snackbarData = useSelector(selectUiData(ERROR_SNACKBAR));

  useEffect(() => {
    dispatch({ type: USER_ACTIONS.CHECKLOGIN });
    if (
      window.location.pathname !== "/signup" &&
      window.location.pathname !== "/login" &&
      !isLoggedIn &&
      !isLoaded
    ) {
      window.location.href = "login";
    }
    setIsLoaded(true);
  }, [dispatch, isLoggedIn, isLoaded]);

  const onLogout = () => {
    dispatch(userSliceActions.logout());
    localStorage.clear();
    window.location.href = "login";
  };

  return (
    <>
      <Grid container width={"100%"}>
        <Grid xs={8} item>
          <Typography variant="h5" marginLeft={1}>
            Item List App
          </Typography>
        </Grid>
        {isLoggedIn ? (
          <>
            <Grid xs={3} item textAlign="end">
              Total items in cart: {totalItemsInCart}
            </Grid>
            <Grid xs={1} item display="flex" justifyContent="end">
              <Button
                style={{ marginRight: ".5rem", marginLeft: ".5rem" }}
                onClick={onLogout}
                variant="contained"
              >
                Logout
              </Button>
            </Grid>
          </>
        ) : null}
      </Grid>
      <Snackbar open={snackbarData?.show} autoHideDuration={6000} onClose={() => dispatch(uiSliceActions.setUiData({
        uiElementName: ERROR_SNACKBAR,
        data: { show: false }
      }))}>
        <Alert severity="error">{snackbarData?.msg}</Alert>
      </Snackbar>
      <RouterProvider router={router} />
    </>
  );
}

function App() {
  return (
    <Provider store={store}>
      <AppWithProvider />
    </Provider>
  );
}

export default App;
