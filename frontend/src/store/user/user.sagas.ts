import { PayloadAction } from "@reduxjs/toolkit";
import { put, takeEvery } from "redux-saga/effects";
import { UserApi } from "../../api/user";
import { USER_ACTIONS } from "./user.actions";
import { User, userSliceActions } from "./user.slice";

function* login(action: PayloadAction<{ email: string; password: string }>) {
  try {
    const result: User & { jwt: string } = yield UserApi.login(action.payload);
    localStorage.setItem("userData", JSON.stringify(result));
    yield put(userSliceActions.login(result));
  } catch (e) {
    console.error(e);
  }
}

function* watchLogin() {
  yield takeEvery(USER_ACTIONS.LOGIN, login);
}

function* signup(action: PayloadAction<{ email: string; password: string }>) {
  try {
    yield UserApi.signup(action.payload);
    yield login(action);
  } catch (e) {
    console.error(e);
  }
}

function* watchSignup() {
  yield takeEvery(USER_ACTIONS.SIGNUP, signup);
}

function* checkLogin() {
  try {
    const userData = localStorage.getItem("userData");
    if (userData) {
      const parsed: User & { jwt: string } = JSON.parse(userData);
      yield put(userSliceActions.login(parsed));
    }
  } catch (e) {
    console.error(e);
  }
}

function* watchCheckLogin() {
  yield takeEvery(USER_ACTIONS.CHECKLOGIN, checkLogin);
}

const userSagas = [watchLogin, watchSignup, watchCheckLogin];
export default userSagas;
