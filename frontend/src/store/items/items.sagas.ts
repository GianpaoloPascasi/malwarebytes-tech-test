import {
  call,
  put,
  PutEffect,
  select,
  take,
  takeEvery,
} from "redux-saga/effects";
import { ITEMS_ACTIONS } from "./items.actions";
import { ItemsApi } from "../../api/items";
import { Item, itemsSliceActions } from "./items.slice";
import { EventChannel, eventChannel } from "redux-saga";
import { PayloadAction } from "@reduxjs/toolkit";
import { selectJWT, selectOrder } from "../user/user.selectors";
import { Order } from "../user/user.slice";
import { OrdersApi } from "../../api/orders";

function* getItems() {
  try {
    const items: Array<Item> = yield ItemsApi.fetchAll();
    yield put(itemsSliceActions.merge(items));
  } catch (e) {
    console.error(e);
  }
}

function* watchGetItems() {
  yield takeEvery(ITEMS_ACTIONS.FETCH_ALL, getItems);
}

function websocketInitChannel() {
  return eventChannel((emitter) => {
    // init the connection here
    const ws = new WebSocket(process.env.REACT_APP_WEBSOCKET_URL!);

    ws.onmessage = (e: MessageEvent<any>) => {
      let msg = null;
      try {
        msg = JSON.parse(e.data);
      } catch (err) {
        console.error(`Error parsing : ${e.data}`);
      }
      if (msg) {
        const { data: items } = msg;
        const action = msg.action;
        switch (action) {
          case "UPDATE_ITEMS":
            return emitter(itemsSliceActions.merge(items));
          default:
          // nothing to do
        }
      }
    }; // unsubscribe function
    return () => {
      console.log("Socket off");
      ws.close();
    };
  });
}
function* websocketSaga(): any {
  try {
    // start websocket and channel
    const channel: EventChannel<any> = yield call(websocketInitChannel);
    while (true) {
      const action: PutEffect<any> = yield take(channel as any);
      yield put(action);
    }
  } finally {
    // channel diconnected
  }
}

function* createOrder() {}

function* addItemToOrder(action: PayloadAction<number>) {
  try {
    let activeOrder: Order = yield select(selectOrder);
    const jwt: string = yield select(selectJWT);
    if (!activeOrder) {
      activeOrder = (yield call(OrdersApi.create, jwt)) as Order;
    }

    const items: Array<Item> = yield call(
      OrdersApi.addItemToOrder,
      activeOrder.id,
      action.payload,
      jwt
    );
    yield put(itemsSliceActions.merge(items));
  } catch (e) {
    console.error(e);
  }
}

function* watchAddItemToOrder() {
  yield takeEvery(ITEMS_ACTIONS.ADD_ITEM_ORDER, addItemToOrder);
}

function* removeItemFromOrder() {}

function* watchRemoveItemFromOrder() {
  yield takeEvery(ITEMS_ACTIONS.REMOVE_ITEM_ORDER, removeItemFromOrder);
}

const itemsSagas = [
  watchGetItems,
  websocketSaga,
  watchAddItemToOrder,
  watchRemoveItemFromOrder,
];
export default itemsSagas;
