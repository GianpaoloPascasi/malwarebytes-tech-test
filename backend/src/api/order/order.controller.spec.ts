import { Logger } from '@nestjs/common';
import { Test, TestingModule } from '@nestjs/testing';
import { TypeOrmModule } from '@nestjs/typeorm';
import { dataSourceConfig } from '../../data-source';
import { AuthModule } from '../auth/auth.module';
import { ItemModule } from '../item/item.module';
import { UserModule } from '../user/user.module';
import { OrderHasItemEntity } from './entities/order-has-item.entity';
import { OrderEntity } from './entities/order.entity';
import { OrderController } from './order.controller';
import { OrderService } from './order.service';

describe('OrderController', () => {
  let controller: OrderController;

  beforeAll(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [OrderController],
      providers: [OrderService],
      imports: [
        TypeOrmModule.forRoot(dataSourceConfig),
        TypeOrmModule.forFeature([OrderEntity, OrderHasItemEntity]),
        UserModule,
        ItemModule,
        AuthModule,
      ],
    })
      .setLogger(new Logger())
      .compile();

    controller = module.get<OrderController>(OrderController);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('should not allow unauthenticated user to create an order', () => {
    expect(controller.create({ status: 1 })).rejects.toBeDefined();
  });

  it('should allow authenticated user to create an order', () => {
    expect(controller.create({ status: 1 })).resolves.toBeDefined();
  });

  it('should not allow unauthenticated user to add an item to an order', () => {
    expect(controller.create({ status: 1 })).rejects.toBeDefined();
  });

  it('should not allow user not holding the order to add an item in it', () => {
    expect(controller.create({ status: 1 })).rejects.toBeDefined();
  });

  it('should allow authenticated user to add an item to an order', () => {
    expect(controller.create({ status: 1 })).resolves.toBeDefined();
  });
});
