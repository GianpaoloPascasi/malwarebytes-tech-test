import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';
import { Request } from 'express';
import { UserSession } from '../../auth/user-session/user-session';
import { OrderService } from '../order.service';

@Injectable()
export class OwnsOrderGuard implements CanActivate {
  constructor(
    private readonly session: UserSession,
    private readonly orderService: OrderService,
  ) {}

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const request: Request = context.switchToHttp().getRequest();
    const orderId = Number(request.params.orderId);
    if (orderId && !isNaN(orderId)) {
      const order = await this.orderService.orderRepository
        .createQueryBuilder('order')
        .where('order.id = :orderId', { orderId })
        .leftJoinAndSelect('order.user', 'user')
        .getOne();
      return order.user.id === this.session.userId;
    }
    return false;
  }
}
