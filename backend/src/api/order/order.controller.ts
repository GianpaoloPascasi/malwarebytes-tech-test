import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Put,
  UseGuards,
  ParseIntPipe,
} from '@nestjs/common';
import { OrderService } from './order.service';
import { CreateOrderDto } from './dto/create-order.dto';
import { UpdateOrderDto } from './dto/update-order.dto';
import { AuthGuard } from '../auth/auth/auth.guard';
import { OwnsOrderGuard } from './owns-order/owns-order.guard';
import { UserSession } from '../auth/user-session/user-session';
import { ApiBearerAuth, ApiBody } from '@nestjs/swagger';

@UseGuards(AuthGuard)
@Controller('order')
export class OrderController {
  constructor(
    private readonly orderService: OrderService,
    private readonly session: UserSession,
  ) {}

  @ApiBody({
    type: CreateOrderDto,
  })
  @ApiBearerAuth()
  @Post()
  create(@Body() createOrderDto: CreateOrderDto) {
    return this.orderService.create(createOrderDto, this.session.user);
  }

  @Get()
  findAll() {
    return this.orderService.findAll(this.session.userId);
  }

  @UseGuards(OwnsOrderGuard)
  @Get(':id')
  findOne(@Param('id') id: string) {
    return this.orderService.findOne(+id);
  }

  @UseGuards(OwnsOrderGuard)
  @Patch(':id')
  update(@Param('id') id: string, @Body() updateOrderDto: UpdateOrderDto) {
    return this.orderService.update(+id, updateOrderDto);
  }

  @UseGuards(OwnsOrderGuard)
  @Delete(':id')
  remove(@Param('id') id: string) {
    return this.orderService.remove(+id);
  }

  @ApiBearerAuth()
  @UseGuards(OwnsOrderGuard)
  @Put(':itemId/order/:orderId')
  addItemToOrder(
    @Param('itemId', ParseIntPipe) itemId: number,
    @Param('orderId', ParseIntPipe) orderId: number,
  ) {
    return this.orderService.addItemToOrder(orderId, itemId);
  }

  @ApiBearerAuth()
  @UseGuards(OwnsOrderGuard)
  @Delete(':orderHasItemId/order/:orderId')
  deleteItemFromOrder(
    @Param('orderHasItemId', ParseIntPipe) orderHasItemId: number,
    @Param('orderId', ParseIntPipe) orderId: number,
  ) {
    return this.orderService.deleteItemFromOrder(orderId, orderHasItemId);
  }
}
