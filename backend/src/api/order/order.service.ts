import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { UserService } from '../user/service/user.service';
import { CreateOrderDto } from './dto/create-order.dto';
import { UpdateOrderDto } from './dto/update-order.dto';
import { OrderEntity } from './entities/order.entity';

@Injectable()
export class OrderService {
  constructor(
    @InjectRepository(OrderEntity)
    public readonly orderRepository: Repository<OrderEntity>,
    private readonly userService: UserService,
  ) {}

  async create(createOrderDto: CreateOrderDto, userEmail: string) {
    const user = await this.userService.findByEmail(userEmail);
    const order = new OrderEntity();
    order.user = user;
    order.status = OrderStatus.CART;
    await order.save();
    return order;
  }

  findAll() {
    return `This action returns all order`;
  }

  findOne(id: number) {
    return `This action returns a #${id} order`;
  }

  update(id: number, updateOrderDto: UpdateOrderDto) {
    return `This action updates a #${id} order`;
  }

  remove(id: number) {
    return `This action removes a #${id} order`;
  }

  async addItemToOrder(orderId: number, itemId: number) {
    const order = await this.orderRepository.findOneBy({ id: orderId });
    if (!order) {
      throw new NotFoundException();
    }
    const item = await this.orderRepository.findOneBy({ id: orderId });
    if (!item) {
      throw new NotFoundException();
    }
  }

  async deleteItemFromOrder(orderId: number, itemId: number) {}
}
