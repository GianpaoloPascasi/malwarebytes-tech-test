import {
  BadRequestException,
  Injectable,
  Logger,
  NotFoundException,
  UnprocessableEntityException,
} from '@nestjs/common';
import { InjectDataSource, InjectRepository } from '@nestjs/typeorm';
import { DataSource, MoreThan, Repository } from 'typeorm';
import { ItemService } from '../item/item.service';
import { UserService } from '../user/service/user.service';
import { CreateOrderDto } from './dto/create-order.dto';
import { UpdateOrderDto } from './dto/update-order.dto';
import { OrderEntity } from './entities/order.entity';
import { AppWebsocketResponse } from '../../model/websocket/response.model';
import { ItemEntity } from '../item/entities/item.entity';
import { OrderStatus } from '../../model/order/order-status.enum';
import { OrderHasItemEntity } from './entities/order-has-item.entity';
import { ApiResponse } from '../../model/response.model';
import { EventEmitter2 } from '@nestjs/event-emitter';

@Injectable()
export class OrderService {
  private logger: Logger = new Logger(OrderService.name);

  constructor(
    @InjectRepository(OrderEntity)
    public readonly orderRepository: Repository<OrderEntity>,
    private readonly userService: UserService,
    private readonly itemService: ItemService,
    @InjectDataSource()
    private readonly dataSource: DataSource,
    private readonly eventEmitter: EventEmitter2,
  ) {}

  async create(
    createOrderDto: CreateOrderDto,
    userEmail: string,
  ): Promise<ApiResponse<OrderEntity>> {
    const user = await this.userService.findByEmail(userEmail);
    const order = new OrderEntity();
    order.user = user;
    order.status = OrderStatus.CART;
    await order.save();
    return {
      code: 200,
      msg: '',
      data: order,
    };
  }

  async findAll(userId: number): Promise<ApiResponse<Array<OrderEntity>>> {
    return {
      code: 200,
      msg: '',
      data: await this.orderRepository
        .createQueryBuilder('order')
        .where('user_id = :userId', { userId })
        .leftJoinAndSelect('order.items', 'items')
        .leftJoinAndSelect('items.item', 'item')
        .getMany(),
    };
  }

  findOne(id: number) {
    return `This action returns a #${id} order`;
  }

  update(id: number, updateOrderDto: UpdateOrderDto) {
    return `This action updates a #${id} order`;
  }

  remove(id: number) {
    return `This action removes a #${id} order`;
  }

  private async findOrderAndItem(orderId: number, itemId: number) {
    const order = await this.orderRepository.findOneBy({ id: orderId });
    if (!order) {
      throw new NotFoundException('Order not found');
    }
    const item = await this.itemService.itemsRepository.findOneBy({
      id: itemId,
    });
    if (!item) {
      throw new NotFoundException('Item not found');
    }
    return { order, item };
  }

  async addItemToOrder(orderId: number, itemId: number, quantity = 1) {
    const { order, item } = await this.findOrderAndItem(orderId, itemId);
    const queryRunner = this.dataSource.createQueryRunner();
    if (item.quantity - quantity <= 0) {
      throw new BadRequestException('Not enough items left');
    }
    try {
      await queryRunner.startTransaction();
      await this.itemService.itemsRepository.decrement(
        { quantity: MoreThan(quantity), id: item.id },
        'quantity',
        quantity,
      );

      const orderHasItem = new OrderHasItemEntity();
      orderHasItem.order = order;
      orderHasItem.item = item;
      await orderHasItem.save();

      order.items.push(orderHasItem);
      await order.save();
      await queryRunner.commitTransaction();

      await item.reload();
      this.eventEmitter.emit('item.quantity.changed', item);

      await order.reload();
      return order;
    } catch (e) {
      this.logger.debug(
        `Could not add item ${itemId} to order ${orderId} because: ${e.message}`,
      );
      await queryRunner.rollbackTransaction();
      throw new UnprocessableEntityException(
        'Could not add item to this order',
      );
    }
  }

  async deleteItemFromOrder(
    orderId: number,
    orderHasItemId: number,
  ): Promise<ApiResponse<OrderEntity>> {
    const order = await this.orderRepository.findOneBy({ id: orderId });
    const itemToDelete = order.items.find((itm) => itm.id === orderHasItemId);
    if (!itemToDelete) {
      throw new NotFoundException('Item in the order not found');
    }
    const queryRunner = this.dataSource.createQueryRunner();
    try {
      await queryRunner.startTransaction();
      await this.itemService.itemsRepository.increment(
        { id: itemToDelete.item.id },
        'quantity',
        1,
      );
      order.items = order.items.slice(
        order.items.findIndex((itm) => itm.id === orderHasItemId),
        1,
      );
      await order.save();
      await queryRunner.commitTransaction();
      return {
        code: 200,
        data: order,
        msg: `Item ${itemToDelete.item.name} removed from order`,
      };
    } catch (e) {
      this.logger.debug(
        `Could not delete orderHasItemId ${orderHasItemId} from order ${orderId} because: ${e.message}`,
      );
      await queryRunner.rollbackTransaction();
      throw new UnprocessableEntityException(
        'Could not delete item from this order',
      );
    }
  }
}
