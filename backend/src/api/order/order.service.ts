import {
  Injectable,
  Logger,
  NotFoundException,
  UnprocessableEntityException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { WebSocketServer } from '@nestjs/websockets';
import { MoreThan, Repository } from 'typeorm';
import { ItemService } from '../item/item.service';
import { UserService } from '../user/service/user.service';
import { CreateOrderDto } from './dto/create-order.dto';
import { UpdateOrderDto } from './dto/update-order.dto';
import { OrderEntity } from './entities/order.entity';
import { Server } from 'socket.io';
import { AppWebsocketResponse } from '../../model/websocket/response.model';
import { ItemEntity } from '../item/entities/item.entity';

@Injectable()
export class OrderService {
  private logger: Logger = new Logger(OrderService.name);

  @WebSocketServer()
  server: Server;

  constructor(
    @InjectRepository(OrderEntity)
    public readonly orderRepository: Repository<OrderEntity>,
    private readonly userService: UserService,
    private readonly itemService: ItemService,
  ) {}

  async create(createOrderDto: CreateOrderDto, userEmail: string) {
    const user = await this.userService.findByEmail(userEmail);
    const order = new OrderEntity();
    order.user = user;
    order.status = OrderStatus.CART;
    await order.save();
    return order;
  }

  findAll() {
    return `This action returns all order`;
  }

  findOne(id: number) {
    return `This action returns a #${id} order`;
  }

  update(id: number, updateOrderDto: UpdateOrderDto) {
    return `This action updates a #${id} order`;
  }

  remove(id: number) {
    return `This action removes a #${id} order`;
  }

  private async findOrderAndItem(orderId: number, itemId: number) {
    const order = await this.orderRepository.findOneBy({ id: orderId });
    if (!order) {
      throw new NotFoundException('Order not found');
    }
    const item = await this.itemService.itemsRepository.findOneBy({
      id: itemId,
    });
    if (!item) {
      throw new NotFoundException('Item not found');
    }
    return { order, item };
  }

  async addItemToOrder(orderId: number, itemId: number, quantity = 1) {
    const { order, item } = await this.findOrderAndItem(orderId, itemId);
    try {
      await this.orderRepository.queryRunner.startTransaction();
      await this.itemService.itemsRepository.decrement(
        { quantity: MoreThan(quantity) },
        'quantity',
        quantity,
      );
      order.items.push(item);
      await order.save();
      await this.orderRepository.queryRunner.commitTransaction();
      this.server.send({
        code: 200,
        data: item,
        msg: `Item ${item.name} decreased by ${quantity}`,
      } as AppWebsocketResponse<ItemEntity>);
      return order;
    } catch (e) {
      await this.orderRepository.queryRunner.rollbackTransaction();
      this.logger.debug(
        `Could not add item ${itemId} to order ${orderId} because: ${e.message}`,
      );
      throw new UnprocessableEntityException(
        'Could not add item to this order',
      );
    }
  }

  async deleteItemFromOrder(orderId: number, itemId: number) {
    const { order } = await this.findOrderAndItem(orderId, itemId);
    try {
      await this.orderRepository.queryRunner.startTransaction();
      await this.itemService.itemsRepository.increment({}, 'quantity', 1);
      order.items = order.items.slice(
        order.items.findIndex((itm) => itm.id === itemId),
        1,
      );
      await order.save();
      await this.orderRepository.queryRunner.commitTransaction();
      return order;
    } catch (e) {
      await this.orderRepository.queryRunner.rollbackTransaction();
      this.logger.debug(
        `Could not delete item ${itemId} from order ${orderId} because: ${e.message}`,
      );
      throw new UnprocessableEntityException(
        'Could not delete item from this order',
      );
    }
  }
}
